// Allow hex color to be passed into a Data URI
@function uri-friendly-color( $color ) {
    @return '%23' + str-slice( '#{$color}', 2, -1 );
}

// map-get down multiple levels without making nested map-gets manually
@function map-get-deep( $map, $keys... ) {
    
    @each $key in $keys {
        $map: map-get( $map, $key );
    }
    
    @return $map;
    
}

// I guess these got removed from Foundation? Super useful stuff.
@function lower-bound( $range ) {
    
    @if ( length( $range ) <= 0 ) {
        @return 0;
    }
    
    @return nth( $range, 1 );
    
}

@function upper-bound( $range ) {
    
    @if ( length( $range ) < 2 ) {
        @return 999999999999;
    }
    
    @return nth( $range, 2 );
    
}

@function str-split( $string, $separator ) {
    
    // empty array/list
    $split-arr: ();
    
    // first index of separator in string
    $index: str-index( $string, $separator );
    
    // loop through string
    @while $index != null {
        
        // get the substring from the first character to the separator
        $item: str-slice( $string, 1, $index - 1 );
        
        // push item to array
        $split-arr: append( $split-arr, $item );
        
        // remove item and separator from string
        $string: str-slice( $string, $index + 1 );
        
        // find new index of separator
        $index: str-index( $string, $separator );
        
    }
    
    // add the remaining string to list (the last item)
    $split-arr: append( $split-arr, $string );
    
    @return $split-arr;
    
}

// Sass has a way to cast from Number to String via inspect(), but not the other way around
@function to-number( $value ) {
    
    @if type-of( $value ) == 'number' {
        @return $value;
    } @else if type-of( $value ) != 'string' {
        $_: log( 'Value for `to-number` should be a number or a string.' );
    }
    
    $result: 0;
    $digits: 0;
    $minus: str-slice( $value, 1, 1 ) == '-';
    $numbers: ( '0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9 );
    
    @for $i from if( $minus, 2, 1 ) through str-length( $value ) {
        $character: str-slice( $value, $i, $i );
        
        @if not ( index( map-keys( $numbers ), $character ) or $character == '.' ) {
            @return to-length( if( $minus, -$result, $result), str-slice( $value, $i ) );
        }
        
        @if $character == '.' {
            $digits: 1; 
        } @else if $digits == 0 {
            $result: $result * 10 + map-get( $numbers, $character );
        } @else {
            $digits: $digits * 10;
            $result: $result + map-get( $numbers, $character ) / $digits;
        }
        
    }
    
    @return if( $minus, -$result, $result );
    
}

// Re-adds the appropriate Unit when converting a String to a Number
// Somehow Numbers can have String Units in Sass. Makes no sense to me either. Always figured things like "padding: 1rem" were Strings
@function to-length( $value, $unit ) {
    
    $units: ( 'px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax );
    
    @if not index( map-keys( $units ), $unit ) {
        $_: log('Invalid unit `#{$unit}`.');
    }
    
    @return $value * map-get( $units, $unit );
    
}

@function strip-unit($number) {
    @if type-of($number) == 'number' and not unitless($number) {
        @return $number / ($number * 0 + 1);
    }
    
    @return $number;
}

/**
* EM values are relative to their parent element while REM are relative to the HTML element (root)
* 
* By providing the Font-Size of the Parent Element (in PX) this gives us a quick way to convert from REM to EM
*
* @param   {number}  $rem             REM Value
* @param   {number}  $font-size       PX Value of the Font-Size of the element
*
* @return  {number}                   Converted EM value
*/
@function rem-to-em( $rem, $font-size ) {
    
    $rem-px: strip-unit( $rem ) * strip-unit( $base-font-size );
    $em: $rem-px / strip-unit( $font-size );
    
    @return $em * 1em;
    
}

/**
* Get the next Key/Value in a Map. Loops back to the first Key/Value if you are accessing the end
* Based on https://gist.github.com/agorilla/9df052eb1e15d8aea446
*
* @param   {map}     $map       Map
* @param   {string}  $key       String Key
* @param   {mixed}   $fallback  Fallback value
* @param   {string}  $return    To return the key or value
*
* @return  {mixed}              Return value
*/
@function map-get-next( $map, $key, $fallback: false, $return: value ) {
    
    // Check if map is valid
    @if type-of( $map ) == map {
        
        // Check if key exists in map
        @if map-has-key( $map, $key ) {
            
            // Init index counter variable
            $i: 0;
            
            // Init key index
            $key-index: false;
            
            // Traverse map for key
            @each $map-key, $map-value in $map {
                
                // Update index
                $i: $i + 1;
                
                // If map key found, set key index
                @if $map-key == $key {
                    $key-index: $i;
                }
                
                // If next index return next value or key based on $return
                @if $i == $key-index + 1 {
                    @if $return == key {
                        @return $map-key;
                    } @else {
                        @return $map-value;
                    }
                }
                
                // If last entry, loop around to the first
                @if $i == length( $map ) {
                    
                    $keys: map-keys( $map );
                    $key: nth( $keys, 1 );
                    
                    @if ( $return == key ) {
                        
                        // Get the first key
                        @return $key;
                        
                    }
                    @else {
                        
                        @return map-get( $map, $key );
                        
                    }
                    
                }
                
            }
            
            @warn 'No next map item for key #{$key}';
            @return $fallback;
            
        }
        
        @warn 'No valid key #{$key} in map';
        @return $fallback;
        
    }
    
    @warn 'No valid map';
    @return $fallback;
    
}

@function em-calc( $pixels, $base: $global-font-size ) {

    @if unit( $base ) == '%' {
        $base: ( $base / 100% ) * 16px;
    }

    @if unit( $base ) == 'rem' {
        $base: strip-unit( $base ) * 16px;
    }

    $em-size: $pixels / strip-unit( $base );

    @return #{strip-unit( $em-size )}em;

}